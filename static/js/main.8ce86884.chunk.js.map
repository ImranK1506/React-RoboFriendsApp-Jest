{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","username","SearchBox","searchfield","searchChange","console","log","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8ce86884.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id } ) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n   return (\n       <div>\n          {\n             robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        username={robots[i].username}\n                        email={robots[i].email}\n                    />\n                )\n             })\n          }\n       </div>\n   )\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n   console.log('SearchBox here');\n   return (\n       <div className='pa2'>\n       <input\n           aria-label='Search Robots'\n           className='pa3 ba b--green bg-lightest-blue'\n           type='search'\n           placeholder='Search robots'\n           onChange={searchChange}\n       />\n       </div>\n   )\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n       <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\n          {props.children}\n       </div>\n   )\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, errorInfo) {\n      this.setState({ hasError: true })\n   }\n\n   render() {\n      if (this.state.hasError) {\n         return <h1>Something went wrong</h1>\n      }\n      return this.props.children\n   }\n}\n\nexport default ErrorBoundary;\n","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n   constructor(props) {\n      super(props);\n      this.state = {\n         count: 0\n      }\n   }\n   // React Lifecycle hook\n   shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.count !== nextState.count) {\n         return true\n      } else {\n      return false\n      }\n   }\n\n   updateCount = () => {\n      this.setState(state => {\n         return { count: this.state.count + 1 }\n      })\n   };\n\n   render() {\n      return (\n          // id is used in the unit test to use as a wrapper\n          <button\n             id='counter'\n             className='f6 link dim ph3 pv2 mb2 dib white bg-black'\n             color={this.props.color}\n             onClick={this.updateCount}>\n             Count: {this.state.count}\n          </button>\n      );\n   }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n   // React Lifecycle hook\n   // shouldComponentUpdate(nextProps, nextState) {\n   //   return false;\n   // }\n\n   render() {\n      console.log('Header here');\n      return (\n          <div>\n            <h1 className='f1'>RoboFriends</h1>\n            <CounterButton />\n          </div>\n      )\n   }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Header from '../components/Header';\n// import { robots } from \"./robots\";\nimport './App.css'\n\nimport { setSearchField, requestRobots } from \"../action\";\n\nconst mapStateToProps = state => {\n   return {\n      searchField: state.searchRobots.searchField,\n      robots: state.requestRobots.robots,\n      isPending: state.requestRobots.isPending,\n      error: state.requestRobots.error\n   }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n   }\n};\n\nclass App extends Component {\n   componentDidMount() {\n      // Grabbing data from local json\n      // this.setState({ robots: robots })\n\n      // Fetch data from API and error handling\n      this.props.onRequestRobots();\n      // Test Loading if response had delay\n      // .then(users => {});\n      console.log('The componentDidMount is triggered as last');\n   }\n\n   render() {\n      const { searchField, onSearchChange, robots, isPending } = this.props;\n      // filter per robot\n      const filteredRobots = robots.filter(robot => {\n         return robot.name\n             .toLowerCase()\n             .includes(searchField.toLowerCase()\n             );\n      });\n      console.log('The Rendering happens next');\n      // In case of latency on fetching API\n      return isPending ?\n          <h1>Loading...</h1> :\n          (\n              <div className='tc'>\n                 <Header />\n                 <SearchBox searchChange={onSearchChange}/>\n                 <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                 </Scroll>\n              </div>\n          );\n   }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n   type: CHANGE_SEARCH_FIELD,\n   payload: text\n});\n\n// A function that returns a function\nexport const requestRobots = () => (dispatch) => {\n   dispatch({ type: REQUEST_ROBOTS_PENDING });\n   fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response => response.json())\n       .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n       .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n   searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n   switch(action.type) {\n      case CHANGE_SEARCH_FIELD:\n         return Object.assign({}, state, { searchField: action.payload });\n      default:\n         return state;\n   }\n};\n\nconst initialStateRobots = {\n   isPending: false,\n   robots: [],\n   error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n   switch(action.type) {\n      case REQUEST_ROBOTS_PENDING:\n         return Object.assign({}, state, { isPending: true });\n      case REQUEST_ROBOTS_SUCCESS:\n         return Object.assign({}, state, { robots: action.payload, isPending: false });\n      case REQUEST_ROBOTS_FAILED:\n         return Object.assign({}, state, { error: action.payload, isPending: false });\n      default:\n         return state;\n   }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n                  <Provider store={store}>\n                     <App />\n                  </Provider>, document.getElementById('root')\n               );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}